--- a/net/minecraft/world/server/TicketManager.java
+++ b/net/minecraft/world/server/TicketManager.java
@@ -37,7 +_,7 @@
    private static final Logger field_219373_a = LogManager.getLogger();
    private static final int field_219374_b = 33 + ChunkStatus.func_222599_a(ChunkStatus.field_222617_m) - 2;
    private final Long2ObjectMap<ObjectSet<ServerPlayerEntity>> field_219375_c = new Long2ObjectOpenHashMap<>();
-   private final Long2ObjectOpenHashMap<SortedArraySet<Ticket<?>>> field_219377_e = new Long2ObjectOpenHashMap<>();
+   public final Long2ObjectOpenHashMap<SortedArraySet<Ticket<?>>> field_219377_e = new Long2ObjectOpenHashMap<>(); // private->public CraftBukkit
    private final TicketManager.ChunkTicketTracker field_219378_f = new TicketManager.ChunkTicketTracker();
    private final TicketManager.PlayerChunkTracker field_219381_i = new TicketManager.PlayerChunkTracker(8);
    private final TicketManager.PlayerTicketTracker field_219382_j = new TicketManager.PlayerTicketTracker(33);
@@ -49,6 +_,8 @@
    private final Executor field_219388_p;
    private long field_219389_q;
 
+   private final Long2ObjectOpenHashMap<SortedArraySet<Ticket<?>>> forcedTickets = new Long2ObjectOpenHashMap<>();
+
    protected TicketManager(Executor p_i50707_1_, Executor p_i50707_2_) {
       ITaskExecutor<Runnable> itaskexecutor = ITaskExecutor.func_213140_a("player ticket throttler", p_i50707_2_::execute);
       ChunkTaskPriorityQueueSorter chunktaskpriorityqueuesorter = new ChunkTaskPriorityQueueSorter(ImmutableList.of(itaskexecutor), p_i50707_1_, 4);
@@ -98,10 +_,23 @@
       }
 
       if (!this.field_219383_k.isEmpty()) {
-         this.field_219383_k.forEach((p_219343_1_) -> {
-            p_219343_1_.func_219291_a(p_219353_1_);
-         });
-         this.field_219383_k.clear();
+         // CraftBukkit start
+         // Iterate pending chunk updates with protection against concurrent modification exceptions
+         java.util.Iterator<ChunkHolder> iter = this.field_219383_k.iterator();
+         int expectedSize = this.field_219383_k.size();
+         do {
+            ChunkHolder playerchunk = iter.next();
+            iter.remove();
+            expectedSize--;
+            playerchunk.func_219291_a(p_219353_1_);
+            // Reset iterator if set was modified using add()
+            if (this.field_219383_k.size() != expectedSize) {
+               expectedSize = this.field_219383_k.size();
+               iter = this.field_219383_k.iterator();
+            }
+         } while (iter.hasNext());
+         // CraftBukkit end
+
          return true;
       } else {
          if (!this.field_219387_o.isEmpty()) {
@@ -134,7 +_,7 @@
       }
    }
 
-   private void func_219347_a(long p_219347_1_, Ticket<?> p_219347_3_) {
+   private void register(long p_219347_1_, Ticket<?> p_219347_3_) {
       SortedArraySet<Ticket<?>> sortedarrayset = this.func_229848_e_(p_219347_1_);
       int i = func_229844_a_(sortedarrayset);
       Ticket<?> ticket = sortedarrayset.func_226175_a_(p_219347_3_);
@@ -143,9 +_,28 @@
          this.field_219378_f.func_215491_b(p_219347_1_, p_219347_3_.func_219477_b(), true);
       }
 
-   }
-
-   private void func_219349_b(long p_219349_1_, Ticket<?> p_219349_3_) {
+      if (p_219347_3_.isForceTicks()) {
+          SortedArraySet<Ticket<?>> tickets = forcedTickets.computeIfAbsent(p_219347_1_, e -> SortedArraySet.func_226172_a_(4));
+          tickets.func_226175_a_(ticket);
+      }
+   }
+
+   /**
+    * Magma - Copy of {@link #register(long, Ticket)} with boolean check
+    */
+   private boolean addTicket(long chunkPosIn, Ticket<?> ticketIn) { // CraftBukkit - void -> boolean
+      SortedArraySet<Ticket<?>> sortedarrayset = this.func_229848_e_(chunkPosIn);
+      int i = func_229844_a_(sortedarrayset);
+      Ticket<?> ticket = sortedarrayset.func_226175_a_(ticketIn);
+      ticket.func_229861_a_(this.field_219389_q);
+      if (ticketIn.func_219477_b() < i) {
+         this.field_219378_f.func_215491_b(chunkPosIn, ticketIn.func_219477_b(), true);
+      }
+
+      return ticketIn == ticket; // CraftBukkit
+   }
+
+   private void release(long p_219349_1_, Ticket<?> p_219349_3_) {
       SortedArraySet<Ticket<?>> sortedarrayset = this.func_229848_e_(p_219349_1_);
       if (sortedarrayset.remove(p_219349_3_)) {
       }
@@ -155,24 +_,71 @@
       }
 
       this.field_219378_f.func_215491_b(p_219349_1_, func_229844_a_(sortedarrayset), false);
-   }
+
+      if (p_219349_3_.isForceTicks()) {
+          SortedArraySet<Ticket<?>> tickets = forcedTickets.get(p_219349_1_);
+          if (tickets != null) {
+              tickets.remove(p_219349_3_);
+          }
+      }
+   }
+
+   /**
+    * Magma - Copy of {@link #release(long, Ticket)} with boolean check
+    */
+   public boolean removeTicket(long chunkPosIn, Ticket<?> ticketIn) { // CraftBukkit - void -> boolean
+      SortedArraySet<Ticket<?>> sortedarrayset = this.func_229848_e_(chunkPosIn);
+      boolean removed = false; // CraftBukkit
+      if (sortedarrayset.remove(ticketIn)) {
+         removed = true; // CraftBukkit
+      }
+
+      if (sortedarrayset.isEmpty()) {
+         this.field_219377_e.remove(chunkPosIn);
+      }
+
+      this.field_219378_f.func_215491_b(chunkPosIn, func_229844_a_(sortedarrayset), false);
+      return removed; // CraftBukkit
+   }
+
+   // CraftBukkit - start
+   public <T> boolean addTicketAtLevel(TicketType<T> ticketType, ChunkPos chunkcoordintpair, int level, T identifier) {
+      return this.addTicket(chunkcoordintpair.func_201841_a(), new Ticket<>(ticketType, level, identifier));
+   }
+   // CraftBukkit - end
 
    public <T> void func_219356_a(TicketType<T> p_219356_1_, ChunkPos p_219356_2_, int p_219356_3_, T p_219356_4_) {
-      this.func_219347_a(p_219356_2_.func_201841_a(), new Ticket<>(p_219356_1_, p_219356_3_, p_219356_4_));
+      this.addTicket(p_219356_2_.func_201841_a(), new Ticket<>(p_219356_1_, p_219356_3_, p_219356_4_));
    }
 
    public <T> void func_219345_b(TicketType<T> p_219345_1_, ChunkPos p_219345_2_, int p_219345_3_, T p_219345_4_) {
       Ticket<T> ticket = new Ticket<>(p_219345_1_, p_219345_3_, p_219345_4_);
-      this.func_219349_b(p_219345_2_.func_201841_a(), ticket);
-   }
+      this.removeTicket(p_219345_2_.func_201841_a(), ticket);
+   }
+
+
+   // CraftBukkit - start
+   public <T> boolean removeTicketAtLevel(TicketType<T> type, ChunkPos pos, int level, T value) {
+      Ticket<T> ticket = new Ticket<>(type, level, value);
+      return this.removeTicket(pos.func_201841_a(), ticket);
+   }
+   // CraftBukkit - end
 
    public <T> void func_219331_c(TicketType<T> p_219331_1_, ChunkPos p_219331_2_, int p_219331_3_, T p_219331_4_) {
-      this.func_219347_a(p_219331_2_.func_201841_a(), new Ticket<>(p_219331_1_, 33 - p_219331_3_, p_219331_4_));
+      this.addTicket(p_219331_2_.func_201841_a(), new Ticket<>(p_219331_1_, 33 - p_219331_3_, p_219331_4_));
    }
 
    public <T> void func_219362_d(TicketType<T> p_219362_1_, ChunkPos p_219362_2_, int p_219362_3_, T p_219362_4_) {
       Ticket<T> ticket = new Ticket<>(p_219362_1_, 33 - p_219362_3_, p_219362_4_);
-      this.func_219349_b(p_219362_2_.func_201841_a(), ticket);
+      this.removeTicket(p_219362_2_.func_201841_a(), ticket);
+   }
+
+   public <T> void registerTicking(TicketType<T> type, ChunkPos pos, int distance, T value) {
+      this.addTicket(pos.func_201841_a(), new Ticket<>(type, 33 - distance, value, true));
+   }
+
+   public <T> void releaseTicking(TicketType<T> type, ChunkPos pos, int distance, T value) {
+      this.removeTicket(pos.func_201841_a(), new Ticket<>(type, 33 - distance, value, true));
    }
 
    private SortedArraySet<Ticket<?>> func_229848_e_(long p_229848_1_) {
@@ -184,9 +_,9 @@
    protected void func_219364_a(ChunkPos p_219364_1_, boolean p_219364_2_) {
       Ticket<ChunkPos> ticket = new Ticket<>(TicketType.field_219491_d, 31, p_219364_1_);
       if (p_219364_2_) {
-         this.func_219347_a(p_219364_1_.func_201841_a(), ticket);
+         this.addTicket(p_219364_1_.func_201841_a(), ticket);
       } else {
-         this.func_219349_b(p_219364_1_.func_201841_a(), ticket);
+         this.removeTicket(p_219364_1_.func_201841_a(), ticket);
       }
 
    }
@@ -242,6 +_,29 @@
       return this.field_219384_l.func_225396_a();
    }
 
+   public boolean shouldForceTicks(long chunkPos) {
+       SortedArraySet<Ticket<?>> tickets = forcedTickets.get(chunkPos);
+       return tickets != null && !tickets.isEmpty();
+   }
+
+   // CraftBukkit start
+   public <T> void removeAllTicketsFor(TicketType<T> ticketType, int ticketLevel, T ticketIdentifier) {
+      Ticket<T> target = new Ticket<>(ticketType, ticketLevel, ticketIdentifier);
+      for (java.util.Iterator<Entry<SortedArraySet<Ticket<?>>>> iterator = this.field_219377_e.long2ObjectEntrySet().fastIterator(); iterator.hasNext();) {
+         Entry<SortedArraySet<Ticket<?>>> entry = iterator.next();
+         SortedArraySet<Ticket<?>> tickets = entry.getValue();
+         if (tickets.remove(target)) {
+            // copied from removeTicket
+            this.field_219378_f.func_215491_b(entry.getLongKey(), func_229844_a_(tickets), false);
+            // can't use entry after it's removed
+            if (tickets.isEmpty()) {
+               iterator.remove();
+            }
+         }
+      }
+   }
+   // CraftBukkit end
+
    class ChunkTicketTracker extends ChunkDistanceGraph {
       public ChunkTicketTracker() {
          super(ChunkManager.field_219249_a + 2, 16, 256);
@@ -358,7 +_,7 @@
                TicketManager.this.field_219385_m.func_212871_a_(ChunkTaskPriorityQueueSorter.func_219069_a(() -> {
                   TicketManager.this.field_219388_p.execute(() -> {
                      if (this.func_215505_c(this.func_215471_c(p_215504_1_))) {
-                        TicketManager.this.func_219347_a(p_215504_1_, ticket);
+                        TicketManager.this.addTicket(p_215504_1_, ticket);
                         TicketManager.this.field_219387_o.add(p_215504_1_);
                      } else {
                         TicketManager.this.field_219386_n.func_212871_a_(ChunkTaskPriorityQueueSorter.func_219073_a(() -> {
@@ -372,7 +_,7 @@
             } else {
                TicketManager.this.field_219386_n.func_212871_a_(ChunkTaskPriorityQueueSorter.func_219073_a(() -> {
                   TicketManager.this.field_219388_p.execute(() -> {
-                     TicketManager.this.func_219349_b(p_215504_1_, ticket);
+                     TicketManager.this.removeTicket(p_215504_1_, ticket);
                   });
                }, p_215504_1_, true));
             }
